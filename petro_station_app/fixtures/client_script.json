[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2024-12-22 17:35:54.435462",
  "module": "Petro Station App",
  "name": "Fetch Valuation Rate",
  "script": "frappe.ui.form.on('Stock Reconciliation', {\r\n    refresh: function(frm) {\r\n        // Add a custom button\r\n        frm.add_custom_button(__('Fetch Valuation Rate'), function() {\r\n            // Fetch Valuation Rates and set them in the table\r\n            if (frm.doc.items && frm.doc.items.length > 0) {\r\n                // Get items without a valuation rate\r\n                const missing_rates = frm.doc.items\r\n                    .filter(item => !item.valuation_rate)\r\n                    .map(item => item.item_code);\r\n\r\n                if (missing_rates.length > 0) {\r\n                    frappe.call({\r\n                        method: 'frappe.client.get_list',\r\n                        args: {\r\n                            doctype: 'Item',\r\n                            filters: {\r\n                                name: ['in', missing_rates]\r\n                            },\r\n                            fields: ['name', 'valuation_rate']\r\n                        },\r\n                        callback: function(r) {\r\n                            if (r.message) {\r\n                                const valuation_map = {};\r\n                                r.message.forEach(item => {\r\n                                    valuation_map[item.name] = item.valuation_rate;\r\n                                });\r\n\r\n                                let updated = false;\r\n                                frm.doc.items.forEach(row => {\r\n                                    if (!row.valuation_rate && valuation_map[row.item_code] !== undefined) {\r\n                                        row.valuation_rate = valuation_map[row.item_code];\r\n                                        updated = true;\r\n                                    }\r\n                                });\r\n\r\n                                if (updated) {\r\n                                    frm.refresh_field('items');\r\n                                    frappe.msgprint(__('Missing Valuation Rates have been updated. Remember to save the document.'));\r\n                                } else {\r\n                                    frappe.msgprint(__('No missing Valuation Rates were found to update.'));\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    frappe.msgprint(__('All items already have Valuation Rates set.'));\r\n                }\r\n            } else {\r\n                frappe.msgprint(__('Please add items to the table first.'));\r\n            }\r\n        }, __('Actions'));\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-12-22 18:50:21.053591",
  "module": "Petro Station App",
  "name": "Fetch Item Group Price",
  "script": "frappe.ui.form.on('Item Price', {\n    refresh: function (frm) {\n        frm.add_custom_button(__('Set Parent Item Groups for Butter Cookies'), function () {\n            frappe.call({\n                method: 'petro_station_app.custom_api.item_price.fetch_item_group.update_parent_item_groups', // Replace with the actual method path\n                callback: function (r) {\n                    if (r.message) {\n                        frappe.msgprint(__('Parent Item Groups updated successfully for all Item Prices with item code \"BUTTER COOKIES\".'));\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 0,
  "modified": "2024-12-26 20:13:33.304939",
  "module": "Petro Station App",
  "name": "Cance Shift docss",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n    refresh: function(frm) {\r\n        // Add a custom button to trigger the dialog\r\n        frm.add_custom_button(__('Cancel Document'), function() {\r\n            // Create the dialog\r\n            let cancelDialog = new frappe.ui.Dialog({\r\n                title: 'Select Document and Doctype',\r\n                fields: [\r\n                    {\r\n                        label: 'Document Type',\r\n                        fieldname: 'doctype',\r\n                        fieldtype: 'Select',\r\n                        options: ['Fuel Sales App', 'Credit Sales App'], // Add other doctypes as needed\r\n                        reqd: true\r\n                    },\r\n                    {\r\n                        label: 'Document Name',\r\n                        fieldname: 'docname',\r\n                        fieldtype: 'Link',\r\n                        options: '', // Initially empty; dynamically set based on selected doctype\r\n                        reqd: true\r\n                    }\r\n                ],\r\n                primary_action_label: 'Cancel',\r\n                primary_action(values) {\r\n                    frappe.call({\r\n                        method: 'petro_station_app.custom_api.statement.cancel_document.cancel_doc_and_delete_linked_docs',\r\n                        args: {\r\n                            docname: values.docname,\r\n                            doctype: values.doctype\r\n                        },\r\n                        callback: function(response) {\r\n                            if (response.message === 'success') {\r\n                                frappe.msgprint(__('Document and linked documents canceled successfully.'));\r\n                                frm.reload_doc();\r\n                            } else {\r\n                                frappe.msgprint({\r\n                                    title: __('Error'),\r\n                                    message: response.message,\r\n                                    indicator: 'red'\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                    cancelDialog.hide();\r\n                }\r\n            });\r\n\r\n            // Event listener for 'doctype' selection change\r\n            cancelDialog.fields_dict.doctype.df.onchange = () => {\r\n                const selected_doctype = cancelDialog.get_value('doctype');\r\n                if (selected_doctype) {\r\n                    // Dynamically set options for the 'docname' field\r\n                    cancelDialog.set_df_property('docname', 'options', selected_doctype);\r\n                    cancelDialog.refresh_field('docname');\r\n                }\r\n            };\r\n\r\n            // Show the dialog\r\n            cancelDialog.show();\r\n        }).addClass('btn-danger'); // Optional: Add a class for styling the button\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Document",
  "enabled": 1,
  "modified": "2024-11-11 13:13:32.278179",
  "module": "Petro Station App",
  "name": "Fetch Invoice NO",
  "script": "frappe.ui.form.on('Customer Document', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Fetch All Invoice Numbers'), function() {\n            frappe.call({\n                method: 'petro_station_app.custom_api.statement.fetch_invoice_no.update_customer_invoices',\n                callback: function(response) {\n                    if (response.message) {\n                        frappe.msgprint(response.message);\n                        frm.reload_doc(); // Reload the document to show updated data\n                    }\n                }\n            });\n        }).addClass('btn-primary');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-10-29 19:39:49.777073",
  "module": "Petro Station App",
  "name": "Customer Doc",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    refresh: function(frm) {\r\n        // Check if the document is submitted (docstatus == 1)\r\n        if (frm.doc.docstatus == 1) {\r\n\r\n            // Add custom button to create Commission Voucher\r\n            frm.add_custom_button(__('Create Customer Reciept'), function() {\r\n                frappe.model.with_doctype('Customer Document', function() {\r\n                    var custDoc = frappe.model.get_new_doc('Customer Document');\r\n                    custDoc.customer = frm.doc.customer;\r\n                    custDoc.pick_the_card = frm.doc.pick_the_card;\r\n                    custDoc.otp_code = frm.doc.otp_code;\r\n                    custDoc.customer_name = frm.doc.customer_name;\r\n                    custDoc.station = frm.doc.station;\r\n                    custDoc.price_list = frm.doc.price_list\r\n                    custDoc.include_payments = frm.doc.include_payments;\r\n                    custDoc.date = frm.doc.date;\r\n                    custDoc.time = frm.doc.time;\r\n                    custDoc.due_date = frm.doc.due_date;\r\n                    custDoc.net_total = frm.doc.net_total;\r\n                    custDoc.total_qty = frm.doc.total_qty;\r\n                    custDoc.grand_totals = frm.doc.grand_totals;\r\n                    custDoc.additional_discount_amount = frm.doc.additional_discount_amount;\r\n                     custDoc.credit_sales_id = frm.doc.name;\r\n               \r\n                    // Copy items from Purchase Invoice to Commission Voucher \r\n                    frm.doc.items.forEach(function(item) {\r\n                        var sales_item_detail = frappe.model.add_child(custDoc, 'Fuel Sales Items', 'items');\r\n                        sales_item_detail.price_list = item.price_list;\r\n                        sales_item_detail.pos_profile = item.pos_profile;\r\n                        sales_item_detail.item_code = item.item_code;\r\n                        sales_item_detail.qty = item.qty;\r\n                        sales_item_detail.rate = item.rate;\r\n                        sales_item_detail.amount = item.amount;\r\n                        sales_item_detail.warehouse = item.warehouse;\r\n                        sales_item_detail.uom = item.number_plate;\r\n                        sales_item_detail.order_number = item.order_number;\r\n                        sales_item_detail.milage = item.milage;\r\n                        sales_item_detail.number_plate = item.number_plate;\r\n                    \r\n                    });\r\n\r\n                    frappe.set_route('Form', 'Customer Document', custDoc.name);\r\n                });\r\n            }, __(\"Customer's Document\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cash Refund",
  "enabled": 1,
  "modified": "2024-10-09 12:49:28.264250",
  "module": "Petro Station App",
  "name": "Cash refund Doc",
  "script": "frappe.ui.form.on('Cah Refund', {\n    refresh: function(frm) {\n        // Check if the document is submitted (docstatus == 1)\n        if (frm.doc.docstatus == 0) {\n\n            // Add custom button to create Commission Voucher\n            frm.add_custom_button(__('Paymment'), function() {\n                frappe.model.with_doctype('Customer Document', function() {\n                    var custDoc = frappe.model.get_new_doc('Customer Document');\n                    custDoc.customer = frm.doc.customer;\n                    custDoc.pick_the_card = frm.doc.pick_the_card;\n                    custDoc.otp_code = frm.doc.otp_code;\n                    custDoc.customer_name = frm.doc.customer_name;\n                    custDoc.station = frm.doc.station;\n                    custDoc.price_list = frm.doc.price_list\n                    custDoc.include_payments = frm.doc.include_payments;\n                    custDoc.date = frm.doc.date;\n                    custDoc.time = frm.doc.time;\n                    custDoc.due_date = frm.doc.due_date;\n                    custDoc.net_total = frm.doc.net_total;\n                    custDoc.total_qty = frm.doc.total_qty;\n                    custDoc.grand_totals = frm.doc.grand_totals;\n                    custDoc.additional_discount_amount = frm.doc.additional_discount_amount;\n                     custDoc.credit_sales_id = frm.doc.name;\n               \n                    // Copy items from Purchase Invoice to Commission Voucher \n                    frm.doc.items.forEach(function(item) {\n                        var sales_item_detail = frappe.model.add_child(custDoc, 'Fuel Sales Items', 'items');\n                        sales_item_detail.price_list = item.price_list;\n                        sales_item_detail.pos_profile = item.pos_profile;\n                        sales_item_detail.item_code = item.item_code;\n                        sales_item_detail.qty = item.qty;\n                        sales_item_detail.rate = item.rate;\n                        sales_item_detail.amount = item.amount;\n                        sales_item_detail.warehouse = item.warehouse;\n                        sales_item_detail.uom = item.number_plate;\n                        sales_item_detail.order_number = item.order_number;\n                        sales_item_detail.milage = item.milage;\n                        sales_item_detail.number_plate = item.number_plate;\n                    \n                    });\n\n                    frappe.set_route('Form', 'Customer Document', custDoc.name);\n                });\n            }, __(\"Make Payment\"));\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cash Refund",
  "enabled": 1,
  "modified": "2024-10-09 19:07:53.620576",
  "module": "Petro Station App",
  "name": "Commission",
  "script": "frappe.ui.form.on('Cash Refund', {\r\n    refresh(frm) {\r\n        // Actions to perform on refresh, if needed\r\n    if (frm.doc.grand_totals) { \r\n            // Calculate 10% of grand_totals\r\n            let commision = frm.doc.grand_totals * 0.10;\r\n            // Set the value of commision field\r\n            frm.set_value('commission', commision);\r\n        }\r\n    },\r\n    \r\n    grand_totals(frm) {\r\n        // Calculate 10% of grand_totals\r\n        let commision = frm.doc.grand_totals * 0.10;\r\n            // Set the value of commision field\r\n            frm.set_value('commission', commision);\r\n     \r\n    }\r\n});\r\n\r\nfunction calculateCustomerTotals(frm) {\r\n    // Set the total quantities and grand total values in the form\r\n    let commission = frm.doc.grand_totals * 0.10;\r\n    frm.set_value('commission', commission);\r\n\r\n    \r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cash Refund",
  "enabled": 0,
  "modified": "2024-10-11 15:05:39.574899",
  "module": "Petro Station App",
  "name": "Populate  On  station",
  "script": "frappe.ui.form.on('Cash Refund', {\n  station: function(frm) {\n    frappe.call({\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\n      args: {\n        station: frm.doc.station,\n      },\n      callback: function(r) {\n        if (r.message) {\n          var fuel_items = r.message.from_pos_profile; // Corrected key name\n          var from_price_list = r.message.from_price_list; // Corrected key name\n          \n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\n            frm.set_value('price_list', from_price_list[0].name);\n          } else {\n            console.log(\"No price lists data found in response.\");\n          }\n\n          if (fuel_items && Array.isArray(fuel_items)) {\n            // Clear existing items before populating (optional)\n            frm.doc.fuel_items = [];\n\n            // Loop through each item in the response\n            for (var i = 0; i < fuel_items.length; i++) {\n              var new_item = frm.add_child('fuel_items'); // Create a new child row\n\n              // Set values from response to new item fields\n              new_item.item_code = fuel_items[i].custom_fuel; // Replace with actual field names \n              new_item.pos_profile = fuel_items[i].name;\n              new_item.warehouse = fuel_items[i].warehouse;\n              new_item.rate = fuel_items[i].item_price;\n              new_item.price_list = from_price_list[0].name;\n              // ... Add other relevant fields\n\n              // Refresh the child table view\n              frm.refresh_field('fuel_items');\n            }\n          } else {\n            console.log(\"No fuel_items data found in response.\");\n          }\n        }\n      }\n    });\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-10-29 19:42:02.309491",
  "module": "Petro Station App",
  "name": "Populate Cust Don",
  "script": "frappe.ui.form.on('Credit Sales App', {\n  station: function(frm) {\n    frappe.call({\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\n      args: {\n        station: frm.doc.station,\n      },\n      callback: function(r) {\n        if (r.message) {\n          var items = r.message.from_pos_profile; // Corrected key name\n          var from_price_list = r.message.from_price_list; // Corrected key name\n          \n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\n            frm.set_value('price_list', from_price_list[0].name);\n          } else {\n            console.log(\"No price lists data found in response.\");\n          }\n\n          if (items && Array.isArray(items)) {\n            // Clear existing items before populating (optional)\n            frm.doc.items = [];\n\n            // Loop through each item in the response\n            for (var i = 0; i < items.length; i++) {\n              var new_item = frm.add_child('items'); // Create a new child row\n\n              // Set values from response to new item fields\n              new_item.item_code = items[i].custom_fuel; // Replace with actual field names \n              new_item.pos_profile = items[i].name;\n              new_item.warehouse = items[i].warehouse;\n              new_item.rate = items[i].item_price;\n              new_item.price_list = from_price_list[0].name;\n              // ... Add other relevant fields\n\n              // Refresh the child table view\n              frm.refresh_field('items');\n            }\n          } else {\n            console.log(\"No fuel_items data found in response.\");\n          }\n        }\n      }\n    });\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 1,
  "modified": "2024-12-01 02:43:58.082816",
  "module": "Petro Station App",
  "name": "Get Shift Details",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n    get_shift_details: function(frm) {\r\n        // Call the Python function\r\n        frappe.call({\r\n            method: \"petro_station_app.custom_api.shift_closing.get_shift_details.get_shift_details\",\r\n            args: {\r\n                doc: frm.doc,\r\n                price_list: frm.doc.price_list\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    // Clear existing rows in 'overal_shift_closing_items'\r\n                    frm.clear_table('overal_shift_closing_items');\r\n                    \r\n                    let grand_total = 0;\r\n\r\n                    // Iterate over the returned shift details and populate the table\r\n                    $.each(r.message, function(fuel, details) {\r\n                        let new_row = frm.add_child('overal_shift_closing_items');\r\n                        new_row.fuel = details.fuel;\r\n                        new_row.opening = details.opening_grand_total;\r\n                        new_row.closing = details.closing_grand_total;\r\n                        new_row.qty_on_meter = details.qty_on_meter;\r\n                        new_row.qty_on_sales = details.qty_on_sales;\r\n                        new_row.rate = details.rate;  // Set the rate for each fuel\r\n                        \r\n                        // Calculate meter-based and sales-based total amounts\r\n                        new_row.meter_based_total_amount = (new_row.qty_on_meter || 0) * (new_row.rate || 0);\r\n                        new_row.sales_based_total_amount = (new_row.qty_on_sales || 0) * (new_row.rate || 0);\r\n                        \r\n                        // Add to grand total\r\n                        grand_total += new_row.meter_based_total_amount;\r\n                        \r\n                        // Calculate the cash sales as the difference between meter-based and sales-based amounts\r\n                        new_row.cash_sales = new_row.meter_based_total_amount - new_row.sales_based_total_amount;\r\n                    });\r\n\r\n                    // Set grand total and refresh the table field\r\n                    frm.set_value('meter_based_grand_total_amount', grand_total);\r\n                    frm.refresh_field('overal_shift_closing_items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Shift Closing Items', {\r\n    rate: function(frm, cdt, cdn) {\r\n        calculateCustomerTotals(frm);\r\n    },\r\n qty_on_meter: function(frm, cdt, cdn) {\r\n        calculateCustomerTotals(frm);\r\n    },\r\n});\r\n\r\nfunction calculateCustomerTotals(frm) {\r\n    let total_qty = 0;\r\n    let grand_total = 0;\r\n\r\n    if (frm.doc.overal_shift_closing_items) {\r\n        frm.doc.overal_shift_closing_items.forEach(function(item) {\r\n            // Calculate meter-based and sales-based total amounts\r\n            item.meter_based_total_amount = (item.qty_on_meter || 0) * (item.rate || 0);\r\n            item.sales_based_total_amount = (item.qty_on_sales || 0) * (item.rate || 0);\r\n            grand_total += item.meter_based_total_amount;\r\n            // Calculate the cash sales as the difference between meter-based and sales-based amounts\r\n            item.cash_sales = item.meter_based_total_amount - item.sales_based_total_amount;\r\n        });\r\n        \r\n        frm.set_value('meter_based_grand_total_amount', grand_total);\r\n \r\n        // Refresh the field to display updated values\r\n        frm.refresh_field('overal_shift_closing_items');\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 1,
  "modified": "2024-10-23 19:59:57.866138",
  "module": "Petro Station App",
  "name": "Get Dipping Details",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n    get_dipping_totals: function(frm) {\r\n        // Call the Python function\r\n        frappe.call({\r\n            method: \"petro_station_app.custom_api.shift_closing.get_shift_details.get_shift_dippings\",\r\n            args: {\r\n                doc: frm.doc\r\n            },\r\n            callback: function(r) {\r\n                console.log(r)\r\n                if (r.message) {\r\n                    // Clear existing rows in 'overal_shift_closing_items'\r\n                    frm.clear_table('dipping_totals');\r\n                    \r\n                    // Iterate over the returned shift details and populate the table\r\n                    $.each(r.message, function(fuel, details) {\r\n                        console.log(details)\r\n                        let new_row = frm.add_child('dipping_totals');\r\n                        new_row.item = details.fuel;\r\n                        new_row.dipping_qty = details.dipping_qty;\r\n                        new_row.current_qty = details.current_qty;\r\n                        new_row.amount_difference = details.amount_difference;\r\n                        new_row.quantity_difference = details.quantity_difference;\r\n                    });\r\n\r\n                    // Refresh the table field to display the new data\r\n                    frm.refresh_field('dipping_totals');\r\n\r\n                    // Notify the user that the shift details have been updated\r\n                    // frappe.msgprint(__('dipping details have been updated.'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Dipping Items', {\r\n    dipping_qty: function (frm, cdt, cdn) {\r\n     getDippingtotals(frm);\r\n    },\r\n\r\n    });\r\nfunction getDippingtotals(frm) {\r\n    \r\n       // Call the Python function\r\n        frappe.call({\r\n            method: \"petro_station_app.custom_api.shift_closing.get_shift_details.get_shift_dippings\",\r\n            args: {\r\n                doc: frm.doc\r\n            },\r\n            callback: function(r) {\r\n                console.log(r)\r\n                if (r.message) {\r\n                    // Clear existing rows in 'overal_shift_closing_items'\r\n                    frm.clear_table('dipping_totals');\r\n                    \r\n                    // Iterate over the returned shift details and populate the table\r\n                    $.each(r.message, function(fuel, details) {\r\n                        console.log(details)\r\n                        let new_row = frm.add_child('dipping_totals');\r\n                        new_row.item = details.fuel;\r\n                        new_row.dipping_qty = details.dipping_qty;\r\n                        new_row.current_qty = details.current_qty;\r\n                        new_row.amount_difference = details.amount_difference;\r\n                        new_row.quantity_difference = details.quantity_difference;\r\n                    });\r\n\r\n                    // Refresh the table field to display the new data\r\n                    frm.refresh_field('dipping_totals');\r\n\r\n                    // Notify the user that the shift details have been updated\r\n                    // frappe.msgprint(__('dipping details have been updated.'));\r\n                }\r\n            }\r\n        });\r\n\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 1,
  "modified": "2024-11-30 10:34:46.359147",
  "module": "Petro Station App",
  "name": "Route To cash sales",
  "script": "frappe.ui.form.on('Station Shift Management', {\n    post_cash_sale: function(frm) {\n        // Add custom button to create Commission Voucher\n        frappe.model.with_doctype('Fuel Sales App', function() {\n                    var lse = frappe.model.get_new_doc('Fuel Sales App');\n                    lse.customer = \"Shell cash customer\";\n                    lse.station = frm.doc.station;\n                    lse.date = frm.doc.from_date;\n                    lse.employee = frm.doc.employee;\n                    lse.shift = frm.doc.shift;\n                    lse.commision_due = frm.doc.custom_commission_rate\n                    lse.account_number = frm.doc.custom_landlord_account_number;\n                    lse.bank = frm.doc.custom_landlord_bank_name;\n                    lse.beneficiary = frm.doc.supplier;\n                    lse.grand_total = frm.doc.custom_invoice_grand_total;\n                    lse.tax = frm.doc.taxes_and_charges_added;\n\n                    // Copy items from Purchase Invoice to Commission Voucher \n                    var grand_total = 0;\n                    var grand_qty = 0\n                    frm.doc.overal_shift_closing_items.forEach(function(item) {\n                        var voucher_detail = frappe.model.add_child(lse, 'Fuel Sales Items', 'items');\n                        voucher_detail.item_code = item.fuel;\n                         voucher_detail.price_list = frm.doc.price_list;\n                        voucher_detail.rate = item.rate;\n                        voucher_detail.qty = item.cash_sales / item.rate;\n                        voucher_detail.amount = item.cash_sales;\n                        grand_total += item.cash_sales;\n                        grand_qty +=  voucher_detail.qty;\n                       \n                  \n                    });\n                    lse.grand_totals = grand_total\n                    lse.total_qty = grand_qty\n                \n\n                    frappe.set_route('Form', 'Fuel Sales App', lse.name);\n                });\n       \n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dipping Log",
  "enabled": 1,
  "modified": "2024-05-09 04:56:42.990789",
  "module": "Petro Station App",
  "name": "Dipping",
  "script": "frappe.ui.form.on('Dipping Log', {\r\n    onload: function(frm) {\r\n        if (!frm.doc.current_dipping_level) {\r\n            frappe.prompt([\r\n                {\r\n                    fieldname: 'current_dipping_level',\r\n                    fieldtype: 'Float',\r\n                    label: __('Current Dipping Level'),\r\n                    reqd: 1\r\n                }\r\n            ], function(values){\r\n                frm.set_value('current_dipping_level', values.current_dipping_level);\r\n            }, __('Enter Current Dipping Level'));\r\n        }\r\n    },\r\n    tank: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.dipping_levels.get_warehouse_from_tank',\r\n            args: {\r\n                tank: frm.doc.tank\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    // Assuming only one item is returned in the response\r\n                    let warehouseDetails = response.message[0];\r\n                    frm.set_value('current_acty_qty', warehouseDetails.actual_qty);\r\n                    frm.set_value('item_code', warehouseDetails.item_code);\r\n\r\n                    // Calculate dipping_difference\r\n                    let dippingDifference = frm.doc.current_acty_qty - frm.doc.current_dipping_level;\r\n                    frm.set_value('dipping_difference', dippingDifference);\r\n                } else {\r\n                    frappe.msgprint('No warehouse details found for the selected tank.');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Dipping Log', {\r\n    current_dipping_level: function(frm) {\r\n        // Recalculate dipping_difference\r\n        let dippingDifference = frm.doc.current_acty_qty - frm.doc.current_dipping_level;\r\n        frm.set_value('dipping_difference', dippingDifference);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-19 13:00:32.660636",
  "module": "Petro Station App",
  "name": "Fuel app",
  "script": "frappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_qty = 0;\r\n    var grand_total = 0;\r\n    frm.doc.items.forEach(function (item) {\r\n        total_qty += item.qty;\r\n        item.amount = item.qty * item.rate;\r\n        grand_total += item.amount;\r\n    });\r\n    frm.set_value('total_qty', total_qty);\r\n    frm.set_value('grand_totals', grand_total);\r\n    refresh_field('items');\r\n}\r\n\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child_doc = locals[cdt][cdn];\r\n        if (child_doc.item_code) {\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.api.get_item_price_rate',\r\n                args: {\r\n                    item_code: child_doc.item_code,\r\n                    price_list: frm.doc.price_list\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.model.set_value(cdt, cdn, 'rate', r.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Fuel Sales App', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Fuel Sales App', {\r\n    grand_totals: function(frm) {\r\n        calculateResult(frm);\r\n    },\r\n    additional_discount_amount: function(frm) {\r\n        calculateResult(frm);\r\n    }\r\n});\r\n\r\nfunction calculateResult(frm) {\r\n    // Get the values of field1 and field2\r\n    var field1Value = frm.doc.grand_totals;\r\n    var field2Value = frm.doc.additional_discount_amount;\r\n\r\n    // Perform the subtraction\r\n    var result = field1Value - field2Value;\r\n\r\n    // Update the result field\r\n    frm.set_value('net_total', result);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 0,
  "modified": "2024-11-08 09:52:57.654635",
  "module": "Petro Station App",
  "name": "Fuel App STP",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n  station: function(frm) {\r\n    frappe.call({\r\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\r\n      args: {\r\n        station: frm.doc.station,\r\n      },\r\n      callback: function(r) {\r\n        if (r.message) {\r\n          var items = r.message.from_pos_profile; // Corrected key name\r\n          var from_price_list = r.message.from_price_list; // Corrected key name\r\n          \r\n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\r\n            frm.set_value('price_list', from_price_list[0].name);\r\n          } else {\r\n            console.log(\"No price lists data found in response.\");\r\n          }\r\n\r\n          if (items && Array.isArray(items)) {\r\n            // Clear existing items before populating (optional)\r\n            frm.doc.items = [];\r\n\r\n            // Loop through each item in the response\r\n            for (var i = 0; i < items.length; i++) {\r\n              var new_item = frm.add_child('items'); // Create a new child row\r\n\r\n              // Set values from response to new item fields\r\n              new_item.item_code = items[i].custom_fuel; // Replace with actual field names \r\n              new_item.pos_profile = items[i].name;\r\n              new_item.warehouse = items[i].warehouse;\r\n              new_item.rate = items[i].item_price;\r\n              new_item.price_list = from_price_list[0].name;\r\n              // ... Add other relevant fields\r\n\r\n              // Refresh the child table view\r\n              frm.refresh_field('items');\r\n            }\r\n          } else {\r\n            console.log(\"No items data found in response.\");\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-06-04 17:28:54.859532",
  "module": "Petro Station App",
  "name": "Purchase Manage Items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    refresh(frm) {\r\n        // Your code here\r\n    }\r\n});\r\n\r\n// frappe.ui.form.on('Stock transfer Item', {\r\n//     qty: function (frm, cdt, cdn) {\r\n//         calculateTotalsTransfers(frm);\r\n//     }\r\n// });\r\n\r\n// function calculateTotalsTransfers(frm) {\r\n//     var total_qty = 0;\r\n//     frm.doc.stock_items.forEach(function (item) {\r\n//         total_qty += item.qty;\r\n//     });\r\n//     frm.set_value('total_qtys', total_qty);\r\n//     refresh_field('stock_items');\r\n// }\r\n\r\nfrappe.ui.form.on('Purchase Management Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\nfrappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Currency Exchange\",\r\n            filters: {\r\n                date: frm.doc.date // Assuming you have a date field in your form\r\n            },\r\n            fields: [\"exchange_rate\"],\r\n            limit_page_length: 1\r\n        },\r\n        callback: function(response) {\r\n           // Define a currency formatter for USD\r\n            var formatter = new Intl.NumberFormat('en-US', {\r\n                style: 'currency',\r\n                currency: 'USD',\r\n                minimumFractionDigits: 2\r\n            });\r\n            \r\n            var formatter2 = new Intl.NumberFormat('en-US', {\r\n                        maximumFractionDigits: 2\r\n            });\r\n\r\n            var ex_rate = 1; // Default exchange rate if not found\r\n            if (response.message && response.message.length > 0) {\r\n                ex_rate = response.message[0].exchange_rate;\r\n            }\r\n            var total_qty = 0;\r\n            var grand_total = 0;\r\n            var grand_total_usd = 0;\r\n            frm.doc.items.forEach(function(item) {\r\n                item.amount = formatter.format(item.amount)\r\n                  item.amount = item.qty * item.rate;\r\n                 \r\n                \r\n                var real_dollars = item.qty * item.rate / ex_rate;\r\n                item.amt_usd = formatter.format(real_dollars); // Adding $ symbol and formatting to 2 decimal places\r\n                total_qty += item.qty;\r\n                grand_total += item.amount;\r\n                grand_total_usd += real_dollars;\r\n            });\r\n\r\n  \r\n            frm.set_value('grand_total_usds', formatter2.format(grand_total_usd));\r\n            frm.set_value('total_qty', total_qty);\r\n            frm.set_value('grand_totals', grand_total);\r\n            refresh_field('items');\r\n        }\r\n    });\r\n}\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-24 16:56:07.770998",
  "module": "Petro Station App",
  "name": "PV Management Items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-09-02 13:02:55.025702",
  "module": "Petro Station App",
  "name": "PV transfer Item",
  "script": "frappe.ui.form.on('Purchase Management Suppliers', {\r\nqty: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\nexchange_rate: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\nrate: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\ncurrency: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n}\r\n});\r\n\r\nfunction calculateTotalsSupplier(frm) {\r\nfrappe.call({\r\nmethod: \"frappe.client.get_list\",\r\nargs: {\r\ndoctype: \"Currency Exchange\",\r\nfilters: {\r\ndate: frm.doc.date // Assuming you have a date field in your form\r\n},\r\nfields: [\"exchange_rate\"],\r\nlimit_page_length: 1\r\n},\r\ncallback: function(response) {\r\n// Define a currency formatter for USD\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\nstyle: 'currency',\r\ncurrency: 'USD',\r\nminimumFractionDigits: 2\r\n});\r\nvar ex_rate = 1; // Default exchange rate if not found\r\nif (response.message && response.message.length > 0) {\r\nex_rate = response.message[0].exchange_rate;\r\n}\r\nvar total_qty = 0;\r\nvar grand_total = 0;\r\nvar grand_total_usd = 0;\r\nfrm.doc.other_items.forEach(function(item) {\r\nif (item.currency === \"USD\") {\r\n    if (typeof item.exchange_rate === 'undefined' || item.exchange_rate === 3675) {\r\n        item.exchange_rate = 0; // Set to default only if not already set or set to default\r\n    }\r\n    item.amount = item.qty * item.rate * item.exchange_rate;\r\n} else {\r\n    item.amount = item.qty * item.rate;\r\n}\r\n\r\nvar real_dollars = item.amount / ex_rate;\r\nitem.amt_usd = formatter.format(real_dollars); // Adding $ symbol and formatting to 2 decimal places\r\ntotal_qty += item.qty;\r\ngrand_total += item.amount;\r\ngrand_total_usd += real_dollars;\r\n});\r\nfrm.set_value('total_quantity', total_qty);\r\nfrm.set_value('grand_total_ugx', grand_total);\r\nfrm.set_value('grand_total_usd', formatter.format(grand_total_usd));\r\nrefresh_field('other_items');\r\n}\r\n});\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 00:49:13.938127",
  "module": "Petro Station App",
  "name": "Change Curerency",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_fuel_items',\r\n            callback: function(response) {\r\n                \r\n                if (response.message && response.message.length > 0) {\r\n                    var fuelItemNames = response.message.map(item => item.name);\r\n                    console.log(fuelItemNames)\r\n                    // Set query for the 'item' field in the child table to filter items by the fetched item names\r\n                    frm.set_query('item', 'stock_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('stock_items');\r\n                    \r\n                 frm.set_query('item', 'items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('items');\r\n                \r\n                  frm.set_query('item', 'other_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('other_items'); \r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-11-29 10:37:38.946119",
  "module": "Petro Station App",
  "name": "set values to CT",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    supplier: function(frm) {\r\n        // Fetch supplier details\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: \"Supplier\",\r\n                filters: {\r\n                    name: frm.doc.supplier // Use the correct field name for supplier\r\n                },\r\n                fields: [\"default_currency\", \"default_price_list\"],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var supplierDetails = r.message[0];\r\n                    var default_currency = supplierDetails.default_currency || \"UGX\"; // Set default currency to \"UGX\" if not found\r\n                    var default_price_list = supplierDetails.default_price_list;\r\n\r\n                    frm.set_value('price_list', default_price_list);\r\n                    frm.set_value('currency', default_currency);\r\n\r\n                    // After setting the supplier details, fetch item prices for both child tables\r\n                    fetchItemPrices(frm, default_price_list, default_currency, 'items');\r\n                    fetchOtherItemPrices(frm, 'other_items', default_currency);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction fetchItemPrices(frm, price_list, currency, child_table) {\r\n    // Define default items\r\n    var defaultItems = ['PMS', 'AGO', 'BIK'];\r\n\r\n    // Fetch item prices for default items\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: \"Item Price\",\r\n            filters: {\r\n                item_code: ['in', defaultItems],\r\n                price_list: price_list,\r\n                buying: 1\r\n            },\r\n            fields: [\"item_code\", \"price_list_rate\"],\r\n            limit_page_length: defaultItems.length\r\n        },\r\n        callback: function(r) {\r\n            var priceListRates = {};\r\n            if (r.message) {\r\n                r.message.forEach(function(itemPrice) {\r\n                    priceListRates[itemPrice.item_code] = itemPrice.price_list_rate;\r\n                });\r\n            }\r\n\r\n            // Check if the items already exist in the child table\r\n            var existingItems = frm.doc[child_table].map(function(d) { return d.item; });\r\n\r\n            // Add default items to the child table if they don't already exist\r\n            var defaultRows = defaultItems.map(function(itemCode) {\r\n                if (!existingItems.includes(itemCode)) {\r\n                    return {\r\n                        item: itemCode,\r\n                        qty: 1,\r\n                        cost_center: frm.doc.station,\r\n                        rate: priceListRates[itemCode] || 0, // Set to 0 if price not found\r\n                        // warehouse: \"PURCHASE STORE - FEU\"\r\n                    };\r\n                }\r\n            }).filter(function(row) { return row; }); // Filter out undefined rows\r\n\r\n            // Add rows to the child table\r\n            defaultRows.forEach(function(row) {\r\n                frm.add_child(child_table, row);\r\n            });\r\n\r\n            // Refresh the child table to show the default rows\r\n            frm.refresh_field(child_table);\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetchOtherItemPrices(frm, child_table, default_currency) {\r\n    // Define default items and their respective suppliers\r\n    var defaultItems = ['URA Customs Duty', 'Fuel Making', 'Transport', 'Clearance'];\r\n    var defaultSuppliers = ['Uganda Revenue Authority', 'Sicpa (U) Ltd', '', 'Ease Freight (U) Ltd'];\r\n\r\n    // Fetch the default price list for each supplier\r\n    var supplierPriceLists = {};\r\n    var supplierCurrency = {};\r\n    var priceListPromises = defaultSuppliers.map(function(supplier) {\r\n        return new Promise(function(resolve) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: \"Supplier\",\r\n                    filters: { name: supplier },\r\n                    fields: [\"default_price_list\", \"default_currency\"],\r\n                    limit_page_length: 1\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        var supplierDetails = r.message[0];\r\n                        var default_currency = supplierDetails.default_currency || \"UGX\"; // Set default currency to \"UGX\" if not found\r\n                        var default_price_list = supplierDetails.default_price_list;\r\n\r\n                        supplierPriceLists[supplier] = default_price_list;\r\n                        supplierCurrency[supplier] = default_currency;\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    // After fetching all price lists, fetch the item prices\r\n    Promise.all(priceListPromises).then(function() {\r\n        var priceFetchPromises = defaultItems.map(function(itemCode, index) {\r\n            var supplier = defaultSuppliers[index];\r\n            var price_list = supplierPriceLists[supplier];\r\n\r\n            return new Promise(function(resolve) {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: {\r\n                        doctype: \"Item Price\",\r\n                        filters: {\r\n                            item_code: itemCode,\r\n                            price_list: price_list,\r\n                            buying: 1\r\n                        },\r\n                        fields: [\"price_list_rate\"],\r\n                        limit_page_length: 1\r\n                    },\r\n                    callback: function(r) {\r\n                        var price_list_rate = (r.message && r.message.length > 0) ? r.message[0].price_list_rate : 0;\r\n                        // // var price_list_rate = 0;\r\n                        // if (currency == \"USD\") {\r\n                        //     price_list_rate = 3675; // Set rate to 36075 if currency is USD\r\n                        // } \r\n                        resolve({\r\n                            supplier: supplier,\r\n                            item: itemCode,\r\n                            qty: itemCode === 'Clearance' ? 1 : frm.doc.total_qtys || 1,\r\n                            cost_center: frm.doc.station,\r\n                            rate: price_list_rate,\r\n                            currency: supplierCurrency[supplier] || default_currency,\r\n                            price_list: price_list\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Add fetched items to the child table\r\n        Promise.all(priceFetchPromises).then(function(defaultRows) {\r\n            var existingItems = frm.doc[child_table].map(function(d) { return d.item; });\r\n\r\n            defaultRows.forEach(function(row) {\r\n                if (!existingItems.includes(row.item)) {\r\n                    frm.add_child(child_table, row);\r\n                }\r\n            });\r\n\r\n            // Refresh the child table to show the default rows\r\n            frm.refresh_field(child_table);\r\n        });\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 13:28:14.993372",
  "module": "Petro Station App",
  "name": "set values of total qty to other_items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    total_qty: function(frm) {\r\n        var defaultItemsToUpdate = ['URA Customs Duty', 'Fuel Making', 'Transport'];\r\n        var totalQty = frm.doc.total_qty;\r\n\r\n        frm.doc.other_items.forEach(function(item) {\r\n            if (defaultItemsToUpdate.includes(item.item)) {\r\n                frappe.model.set_value(item.doctype, item.name, 'qty', totalQty);\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 14:51:36.737628",
  "module": "Petro Station App",
  "name": "Set Rate",
  "script": "frappe.ui.form.on('Purchase Management Items', {\r\n    item: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Item Price',\r\n                filters: {\r\n                    item_code: child.item,\r\n                    price_list: frm.doc.price_list,\r\n                    buying: 1\r\n                },\r\n                fields: ['price_list_rate'],\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var price_list_rate = r.message[0].price_list_rate;\r\n                    frappe.model.set_value(cdt, cdn, 'rate', price_list_rate); // Set the rate field in the child table\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Purchase Management Suppliers', {\r\n    item: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Item Price',\r\n                filters: {\r\n                    item_code: child.item,\r\n                    price_list: frm.doc.price_list,\r\n                    buying: 1\r\n                },\r\n                fields: ['price_list_rate'],\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var price_list_rate = r.message[0].price_list_rate;\r\n                    frappe.model.set_value(cdt, cdn, 'rate', price_list_rate); // Set the rate field in the child table\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-08 16:22:36.493925",
  "module": "Petro Station App",
  "name": "Expense Filter",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_filtered_doctype',\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    var filteredNames = response.message.map(item => item.name);\r\n                    console.log(filteredNames);\r\n                    \r\n                    // Set query for the 'item' field in the 'expense_items' child table\r\n                    frm.set_query('item', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n                    \r\n                    // Set query for the 'party_type' field in the 'expense_items' child table\r\n                    frm.set_query('party_type', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Refresh the 'expense_items' child table to apply the filters\r\n                    frm.refresh_field('expense_items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-28 15:49:33.256476",
  "module": "Petro Station App",
  "name": "Dont back or fron date",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n    validate: function(frm) {\r\n        let sale_date = frm.doc.date;\r\n        let today = frappe.datetime.get_today();\r\n\r\n        // Fetch user roles asynchronously\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n\r\n                    // Check if user has 'Dont Back Date' role\r\n                    if (user_roles.includes('Dont Back Date')) {\r\n                        // For users with 'Dont Back Date' role, validate sale date\r\n                        if (!isDateWithinRange(sale_date, today)) {\r\n                            frappe.msgprint(__('You can only save this document if the sale date is today, one day before, or one day after. Please Contact ACCOUNTS or choose an appropriate date.'));\r\n                            frappe.validated = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log('Error fetching user roles:', r);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Function to check if a date is within one day before or one day after the reference date\r\nfunction isDateWithinRange(date, referenceDate) {\r\n    let formattedDate = frappe.datetime.str_to_obj(date);\r\n    let formattedReferenceDate = frappe.datetime.str_to_obj(referenceDate);\r\n\r\n    // Get the previous day and the next day\r\n    let previousDay = new Date(formattedReferenceDate);\r\n    previousDay.setDate(formattedReferenceDate.getDate() - 1);\r\n\r\n    let nextDay = new Date(formattedReferenceDate);\r\n    nextDay.setDate(formattedReferenceDate.getDate() + 1);\r\n\r\n    // Check if the date is within range\r\n    return (\r\n        formattedDate.getFullYear() === formattedReferenceDate.getFullYear() &&\r\n        formattedDate.getMonth() === formattedReferenceDate.getMonth() &&\r\n        (formattedDate.getDate() === previousDay.getDate() ||\r\n         formattedDate.getDate() === formattedReferenceDate.getDate() ||\r\n         formattedDate.getDate() === nextDay.getDate())\r\n    );\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 0,
  "modified": "2024-06-28 15:50:46.035728",
  "module": "Petro Station App",
  "name": "Dont back or fron date cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    validate: function(frm) {\r\n        let sale_date = frm.doc.date;\r\n        let today = frappe.datetime.get_today();\r\n\r\n        // Fetch user roles asynchronously\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n\r\n                    // Check if user has 'Dont Back Date' role\r\n                    if (user_roles.includes('Dont Back Date')) {\r\n                        // For users with 'Dont Back Date' role, validate sale date\r\n                        if (!datesAreEqual(sale_date, today)) {\r\n                            frappe.msgprint(__('You cannot save this document with the sale date set to {0}. Please Contact Accounts or choose today\\'s date.', [sale_date]));\r\n                            frappe.validated = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log('Error fetching user roles:', r);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Function to compare two dates\r\nfunction datesAreEqual(date1, date2) {\r\n    // Convert dates to YYYY-MM-DD format for comparison\r\n    let formattedDate1 = frappe.datetime.str_to_obj(date1);\r\n    let formattedDate2 = frappe.datetime.str_to_obj(date2);\r\n\r\n    return formattedDate1.getFullYear() === formattedDate2.getFullYear() &&\r\n           formattedDate1.getMonth() === formattedDate2.getMonth() &&\r\n           formattedDate1.getDate() === formattedDate2.getDate();\r\n}\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-12-02 18:39:58.215779",
  "module": "Petro Station App",
  "name": "Fuel app Cr",
  "script": "frappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_qty = 0;\r\n    var grand_total = 0;\r\n    frm.doc.items.forEach(function (item) {\r\n        total_qty += item.qty;\r\n        item.amount = item.qty * item.rate;\r\n        grand_total += item.amount;\r\n    });\r\n    frm.set_value('total_qty', total_qty);\r\n    frm.set_value('grand_totals', grand_total);\r\n    refresh_field('items');\r\n}\r\n\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    item_code: function (frm, cdt, cdn) {\r\n        var child_doc = locals[cdt][cdn]; // Get the current child table row\r\n        if (child_doc.item_code) {\r\n            // Fetch the rate from the custom API method\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.api.get_item_price_rate',\r\n                args: {\r\n                    item_code: child_doc.item_code,\r\n                    price_list: frm.doc.price_list\r\n                },\r\n                callback: function (rate_response) {\r\n                    if (rate_response.message) {\r\n                        const base_rate = parseFloat(rate_response.message);\r\n\r\n                        // Set the fetched rate to the item row\r\n                        frappe.model.set_value(cdt, cdn, 'rate', base_rate);\r\n\r\n                        // Check if the customer has a discount\r\n                        if (frm.doc.customer) {\r\n                            frappe.call({\r\n                                method: \"frappe.client.get_value\",\r\n                                args: {\r\n                                    doctype: \"Customer\",\r\n                                    filters: { name: frm.doc.customer },\r\n                                    fieldname: \"custom_discount\"\r\n                                },\r\n                                callback: function (discount_response) {\r\n                                    if (discount_response.message && discount_response.message.custom_discount) {\r\n                                        const discount = parseFloat(discount_response.message.custom_discount);\r\n\r\n                                        if (!isNaN(discount) && discount > 0) {\r\n                                            // Apply the discount to the base rate\r\n                                            const discounted_rate = base_rate - discount;\r\n\r\n                                            // Update the rate with the discounted value\r\n                                            frappe.model.set_value(cdt, cdn, 'rate', discounted_rate);\r\n\r\n                                            // Refresh the field in the UI\r\n                                            frm.refresh_field('items');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Credit Sales App', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Credit Sales App', {\r\n    grand_totals: function(frm) {\r\n        calculateResult(frm);\r\n    },\r\n    additional_discount_amount: function(frm) {\r\n        calculateResult(frm);\r\n    }\r\n});\r\n\r\nfunction calculateResult(frm) {\r\n    // Get the values of field1 and field2\r\n    var field1Value = frm.doc.grand_totals;\r\n    var field2Value = frm.doc.additional_discount_amount;\r\n\r\n    // Perform the subtraction\r\n    var result = field1Value - field2Value;\r\n\r\n    // Update the result field\r\n    frm.set_value('net_total', result);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-12-05 13:38:26.162368",
  "module": "Petro Station App",
  "name": "Fuel App STP Cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n  station: function(frm) {\r\n    frappe.call({\r\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\r\n      args: {\r\n        station: frm.doc.station,\r\n      },\r\n      callback: function(r) {\r\n         if (\r\n            console.log()) \r\n            \r\n            {\r\n          var items = r.message.from_pos_profile; // Corrected key name\r\n          var from_price_list = r.message.from_price_list; // Corrected key name\r\n          \r\n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\r\n            frm.set_value('price_list', from_price_list[0].name);\r\n          } else {\r\n            console.log(\"No price lists data found in response.\");\r\n          }\r\n\r\n          if (items && Array.isArray(items)) {\r\n            // Clear existing items before populating (optional)\r\n            frm.doc.items = [];\r\n\r\n            // Loop through each item in the response\r\n            for (var i = 0; i < items.length; i++) {\r\n              var new_item = frm.add_child('items'); // Create a new child row\r\n\r\n              // Set values from response to new item fields\r\n              new_item.item_code = items[i].custom_fuel; // Replace with actual field names \r\n              new_item.pos_profile = items[i].name;\r\n              new_item.warehouse = items[i].warehouse;\r\n              new_item.rate = items[i].item_price;\r\n              new_item.price_list = from_price_list[0].name;\r\n              // ... Add other relevant fields\r\n\r\n              // Refresh the child table view\r\n              frm.refresh_field('items');\r\n            }\r\n          } else {\r\n            console.log(\"No items data found in response.\");\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-12-02 18:17:02.636320",
  "module": "Petro Station App",
  "name": "Expense Filter Cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_filtered_doctype',\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    var filteredNames = response.message.map(item => item.name);\r\n                    // console.log(filteredNames);\r\n                    \r\n                    // Set query for the 'item' field in the 'expense_items' child table\r\n                    frm.set_query('item', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n                    \r\n                    // Set query for the 'party_type' field in the 'expense_items' child table\r\n                    frm.set_query('party_type', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Refresh the 'expense_items' child table to apply the filters\r\n                    frm.refresh_field('expense_items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-07-10 18:18:43.343816",
  "module": "Petro Station App",
  "name": "Bank Deposits",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Post Bank Deposits'), function() {\r\n                frappe.call({\r\n                    method: 'petro_station_app.custom_api.all_todays_banking.update_bank_deposits',\r\n                    args: {\r\n                        docname: frm.doc.name\r\n                    },\r\n                    callback: function(r) {\r\n                        if (frm.doc.custom_bank_deposits_status) {\r\n                            frappe.msgprint(__('Bank Deposits Entry already posted'));\r\n                        } else if (!r.exc) {\r\n                            // frm.set_value('custom_bank_deposits_status', \"Deposits Made\");\r\n                            frappe.msgprint(__('Bank Deposits Entry Posted successfully'));\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-08-05 12:37:49.819314",
  "module": "Petro Station App",
  "name": "Reference No Set",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    paid_to: function(frm) {\r\n        // Fetch the account details\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'Account',\r\n                name: frm.doc.paid_to\r\n            },\r\n            callback: function(response) {\r\n                let account = response.message;\r\n                if (account && account.account_type === 'Bank') {\r\n                    frm.set_value('reference_no', frappe.session.user_fullname);\r\n                    frm.set_value('reference_date', frm.doc.posting_date);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vehicle Plate Update",
  "enabled": 1,
  "modified": "2024-08-09 18:32:42.480003",
  "module": "Petro Station App",
  "name": "Update plate No",
  "script": "frappe.ui.form.on('Vehicle Plate Update', {\n    before_save: function(frm) {\n        // Call the server-side Python function\n        frappe.call({\n            method: 'petro_station_app.custom_api.vehicle_number.update_vehicle_number', // Update this with the correct path to your function\n            args: {\n                target_cost_center: frm.doc.station,\n                from_date: frm.doc.posting_date,\n                to_date: frm.doc.to_date\n            },\n            callback: function(r) {\n                console.log(r)\n                if(r.message) {\n                    frappe.msgprint(__(\"Vehicle numbers have been updated in the Sales Invoice remarks.\"));\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 1,
  "modified": "2025-01-29 18:45:41.242959",
  "module": "Petro Station App",
  "name": "Statement",
  "script": "frappe.ui.form.on('Statement', {\r\n    refresh: function(frm) {\r\n        // Add a button to trigger the population of the statement details\r\n        frm.add_custom_button(__('Get Statement Details'), function() {\r\n            // First, get statement details\r\n            get_statement_details(frm).then(() => {\r\n                // Then, trigger the additionDiscount function\r\n                additionDiscount(frm);\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nfunction get_statement_details(frm) {\r\n    frappe.call({\r\n        method: 'petro_station_app.custom_api.statement.statement.get_sales_invoice_details_and_payments',\r\n        args: {\r\n            customer: frm.doc.customer,\r\n            from_date: frm.doc.from_date,\r\n            to_date: frm.doc.to_date,\r\n            cost_center: frm.doc.cost_center\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                let data = r.message.sales_invoice_data;\r\n                let balance_brought_forward = r.message.balance_brought_forward || 0;\r\n                let paid_amount = r.message.total_paid_amount || 0;\r\n                let running_balance = balance_brought_forward;  // Start the running balance with the brought forward balance\r\n                frm.set_value('balance_forward', balance_brought_forward);\r\n\r\n                // Clear existing child table data\r\n                frm.clear_table('statement_details');\r\n\r\n                // Add a row for balance brought forward at the top\r\n                if (balance_brought_forward !== 0) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'item_code', \"Balance Forward\");\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_date', frm.doc.from_date); // Use the start date as the date\r\n                    frappe.model.set_value(child.doctype, child.name, 'entry_type', 'Balance Brought Forward');  // Indicate type as Balance Brought Forward\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', balance_brought_forward); // Set balance brought forward as the running balance\r\n                }\r\n\r\n                // Sort the sales invoice data by invoice_date (or posting_date) in ascending order\r\n                data.sort((a, b) => new Date(a.posting_date) - new Date(b.posting_date));\r\n\r\n                // Combine invoices, payments, and GL entries by their posting_date\r\n                let combinedData = [];\r\n                data.forEach(function(invoice) {\r\n                    combinedData.push({\r\n                        type: 'Invoice',\r\n                        posting_date: invoice.posting_date,\r\n                        amount: invoice.amount,\r\n                        item_code: invoice.item_code,\r\n                        vehicle_no: invoice.custom_vehicle_plates,\r\n                        invoice_no: invoice.invoice_no,\r\n                        qty: invoice.qty,\r\n                        rate: invoice.rate,\r\n                        station_inv: invoice.cost_center,\r\n                        sales_invoice_no: invoice.invoice_name,\r\n                        credit_sales_id: invoice.credit_sales_id,\r\n                        sales_app_id: invoice.sales_app_id\r\n                    });\r\n                });\r\n\r\n                r.message.payments.forEach(function(payment) {\r\n                    combinedData.push({\r\n                        type: 'Payment',\r\n                        posting_date: payment.posting_date,\r\n                        paid_amount: payment.paid_amount,\r\n                        payment_entry: payment.payment_entry_name,\r\n                        station_pe: payment.cost_center\r\n                    });\r\n                });\r\n\r\n                r.message.gl_entries.forEach(function(gl_entry) {\r\n                    combinedData.push({\r\n                        type: 'GL Entry',\r\n                        posting_date: gl_entry.posting_date,\r\n                        amount: gl_entry.debit,  // Assuming debit is the amount\r\n                        paid_amount: gl_entry.credit,  // Assuming credit is the paid amount\r\n                        voucher_no: gl_entry.voucher_no,\r\n                        station_jl: gl_entry.cost_center\r\n                    });\r\n                });\r\n\r\n                // Sort the combined data by posting_date (ascending)\r\n                combinedData.sort((a, b) => new Date(a.posting_date) - new Date(b.posting_date));\r\n\r\n                // Now loop through combinedData and add rows\r\n                combinedData.forEach(function(entry) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_date', entry.posting_date);\r\n                    frappe.model.set_value(child.doctype, child.name, 'entry_type', entry.type);\r\n\r\n                    if (entry.type === 'Invoice') {\r\n                        frappe.model.set_value(child.doctype, child.name, 'item_code', entry.item_code);\r\n                        frappe.model.set_value(child.doctype, child.name, 'vehicle_no', entry.vehicle_no);\r\n                        frappe.model.set_value(child.doctype, child.name, 'invoice_no', entry.invoice_no);\r\n                        frappe.model.set_value(child.doctype, child.name, 'qty', entry.qty);\r\n                        frappe.model.set_value(child.doctype, child.name, 'rate', entry.rate);\r\n                        frappe.model.set_value(child.doctype, child.name, 'amount', entry.amount);\r\n                        frappe.model.set_value(child.doctype, child.name, 'station_inv', entry.station_inv);\r\n                        frappe.model.set_value(child.doctype, child.name, 'sales_invoice_no', entry.sales_invoice_no);\r\n                        frappe.model.set_value(child.doctype, child.name, 'credit_sales_id', entry.credit_sales_id);\r\n                        frappe.model.set_value(child.doctype, child.name, 'sales_app_id', entry.sales_app_id);\r\n                    }\r\n\r\n                    if (entry.type === 'Payment') {\r\n                        frappe.model.set_value(child.doctype, child.name, 'payment_entry', entry.payment_entry);\r\n                        frappe.model.set_value(child.doctype, child.name, 'station_pe', entry.station_pe);\r\n                        frappe.model.set_value(child.doctype, child.name, 'paid_amount', entry.paid_amount);\r\n                    }\r\n\r\n                    if (entry.type === 'GL Entry') {\r\n                        frappe.model.set_value(child.doctype, child.name, 'voucher_no', entry.voucher_no);\r\n                        frappe.model.set_value(child.doctype, child.name, 'station_jl', entry.station_jl);\r\n                        frappe.model.set_value(child.doctype, child.name, 'amount', entry.amount);\r\n                        frappe.model.set_value(child.doctype, child.name, 'paid_amount', entry.paid_amount);\r\n                    }\r\n\r\n                    // Update the running balance\r\n                    running_balance += entry.amount || 0;\r\n                    running_balance -= entry.paid_amount || 0;\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance);\r\n                });\r\n\r\n                // Refresh the field to display the updated child table\r\n                frm.refresh_field('statement_details');\r\n\r\n                // Recalculate totals after populating the child table\r\n                calculateTotals(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_amount = 0;\r\n    var total_paid = 0;\r\n    frm.doc.statement_details.forEach(function(item) {\r\n        total_amount += item.amount || 0;  // Add amount, default to 0 if undefined\r\n        total_paid += item.paid_amount || 0;  // Add paid amount, default to 0 if undefined\r\n    });\r\n    var bf = frm.doc.balance_forward\r\n    var total_outford = (bf - total_paid) + total_amount\r\n    var outstanding_amount = total_amount - total_paid;\r\n     \r\n    frm.set_value('total_invoices', total_amount);  // Set total invoices\r\n    frm.set_value('total_paid', total_paid);  // Set total paid\r\n    frm.set_value('total_outstanding_amount', total_outford);  // Set total outstanding amount\r\n    \r\n\r\n    // Refresh the parent fields\r\n    frm.refresh_field('total_invoices');\r\n    frm.refresh_field('total_paid');\r\n    frm.refresh_field('total_outstanding_amount');\r\n}\r\n\r\nfunction additionDiscount(frm) {\r\n    let total_additional_discount = 0;\r\n    let total_outstanding_amount = 0;\r\n    let need_to_save = false;\r\n\r\n    // Fetch linked statement details\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Invoice Table Statement',\r\n            filters: { parent: frm.doc.name }, // Fetch linked statement details\r\n            fields: ['name', 'invoice_vourcher', 'additional_discount_amount', 'outstanding_amount'] // Fetch outstanding_amount\r\n        },\r\n        callback: function(response) {\r\n            const statement_details = response.message || [];\r\n            let processed_count = 0;\r\n\r\n            if (statement_details.length > 0) {\r\n                statement_details.forEach((detail) => {\r\n                    // Accumulate additional discount from 'Statement Details'\r\n                    total_additional_discount += detail.additional_discount_amount || 0;\r\n                    \r\n                    // Accumulate total outstanding amount\r\n                    total_outstanding_amount += detail.outstanding_amount || 0;\r\n\r\n                    if (detail.invoice_vourcher) {\r\n                        // Fetch the linked Sales Invoice to ensure correct discount\r\n                        frappe.call({\r\n                            method: 'frappe.client.get',\r\n                            args: {\r\n                                doctype: 'Sales Invoice',\r\n                                name: detail.invoice_vourcher\r\n                            },\r\n                            callback: function(sales_invoice) {\r\n                                const discount_amount = sales_invoice.message.discount_amount || 0;\r\n\r\n                                // Update additional_discount_amount if necessary\r\n                                if (!detail.additional_discount_amount || detail.additional_discount_amount !== discount_amount) {\r\n                                    frappe.model.set_value('Statement Details', detail.name, 'additional_discount_amount', discount_amount);\r\n                                    need_to_save = true; // Mark for saving\r\n                                }\r\n\r\n                                // Ensure all records are processed\r\n                                processed_count++;\r\n                                if (processed_count === statement_details.length) {\r\n                                    finalizeStatement(frm, total_additional_discount, total_outstanding_amount, need_to_save);\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        processed_count++;\r\n                        // Finalize when all records are processed\r\n                        if (processed_count === statement_details.length) {\r\n                            finalizeStatement(frm, total_additional_discount, total_outstanding_amount, need_to_save);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to finalize and update the Statement\r\nfunction finalizeStatement(frm, total_additional_discount, total_outstanding_amount, need_to_save) {\r\n    // Set the total additional discount\r\n    frm.set_value('additional_discount_amount', total_additional_discount);\r\n\r\n    // Set the total outstanding amount\r\n    frm.set_value('total_outstanding_amount', total_outstanding_amount);\r\n\r\n    // Save the document if any updates were made\r\n    if (need_to_save) {\r\n        frm.save();\r\n    }\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-09-02 14:39:52.545985",
  "module": "Petro Station App",
  "name": "Due date",
  "script": "frappe.ui.form.on('Purchase Invoice', {\r\n    custom_update_due_date: function(frm) {\r\n        if (frm.doc.posting_date) {\r\n            let postingDate = frappe.datetime.add_days(frm.doc.posting_date, 30);\r\n            frm.set_value('due_date', postingDate);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 0,
  "modified": "2024-09-02 14:58:05.844627",
  "module": "Petro Station App",
  "name": "All cost center",
  "script": "frappe.ui.form.on('Statement', {\r\n    onload: function(frm) {\r\n        // Allow all cost centers when the document is opened\r\n        frm.fields_dict['statement_details'].grid.get_field('station_inv').get_query = function(doc) {\r\n            return {\r\n                filters: {}  // No filters applied, allowing all Cost Centers\r\n            };\r\n        };\r\n    },\r\n    validate: function(frm) {\r\n        // Optional: Reapply the cost center restriction on validation\r\n        frm.fields_dict['statement_details'].grid.get_field('station_inv').get_query = function(doc) {\r\n            return {\r\n                filters: {\r\n                    // Apply any restrictions based on user roles or selected cost centers if needed\r\n                    // For example, filter by a specific Cost Center: 'name': frm.doc.cost_center \r\n                }\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 1,
  "modified": "2024-09-07 18:57:50.955580",
  "module": "Petro Station App",
  "name": "Get total Discount",
  "script": "frappe.ui.form.on('Statement', {\r\n    update_discount: function (frm) {\r\n        calculateDiscounts(frm);\r\n    }\r\n});\r\n\r\nfunction calculateDiscounts(frm) {\r\n    var total_discount = 0;\r\n\r\n    // Loop through statement details and calculate total discount\r\n    frm.doc.statement_details.forEach(function (item) {\r\n        total_discount += item.additional_discount_amount || 0; // Safely handle undefined values\r\n    });\r\n\r\n    // Get the current additional_discount_amount\r\n    var current_discount_amount = frm.doc.additional_discount_amount || 0;\r\n\r\n    // Update the additional discount amount only if it has changed\r\n    if (total_discount !== current_discount_amount) {\r\n        frm.set_value('additional_discount_amount', total_discount);\r\n\r\n        // Calculate the new total outstanding amount\r\n        if (frm.doc.total_outstanding_amount) {\r\n            var update_outstanding = frm.doc.total_outstanding_amount - (total_discount - current_discount_amount);\r\n            frm.set_value('total_outstanding_amount', update_outstanding);\r\n        }\r\n\r\n        // Refresh the statement details field to show changes\r\n        refresh_field('statement_details');\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 1,
  "modified": "2025-01-28 16:07:47.794062",
  "module": "Petro Station App",
  "name": "Fetch order",
  "script": "frappe.ui.form.on('Statement', {\n\trefresh(frm) {\n\t\t       // Add a button to trigger the population of the statement details\n        frm.add_custom_button(__('Fetch Order Numbers'), function() {\n            fetchOrderNumber(frm)\n            // fetchDiscount(frm)\n      \n        });\n\t}\n})\nfunction fetchOrderNumber(frm) {\n    // Call the Python method using Frappe's client API\n    frappe.call({\n        method: 'petro_station_app.custom_api.statement.fetch_order_numbers.fetch_order_numbers',\n        args: {\n            statement_name: frm.doc.name  // Pass the name of the Statement document\n        },\n        callback: function(response) {\n            const order_numbers = response.message.order_numbers || [];\n            const invoice_numbers = response.message.invoice_numbers || [];\n            // console.log(response);  // Log the response for debugging\n\n            // Ensure that order_numbers is an array and has values\n            if (order_numbers.length > 0) {\n                let statement_details = frm.doc.statement_details || [];\n\n                // Loop through the statement details child table\n                statement_details.forEach((detail, index) => {\n                    // Check if we have a corresponding entry in order_numbers for the current index\n                    if (order_numbers[index]) {\n                        const { order_number } = order_numbers[index];\n\n                        // Update the order_no and invoice_no fields in the Statement Details child table\n                        frappe.model.set_value(detail.doctype, detail.name, 'order_no', order_number);\n                                    }\n                    // if (invoice_numbers[index]) {\n                    //     const { invoice_no} = order_numbers[index];\n\n \n                    //     frappe.model.set_value(detail.doctype, detail.name, 'invoice_no', invoice_no);\n                    // }\n                });\n\n                // Refresh the field to show the updated data\n                frm.refresh_field('statement_details');\n            }\n        }\n    });\n}\n\n\n\n// function fetchDiscount(frm) {\n//     // Call the Python method using Frappe's client API\n//     frappe.call({\n//         method: 'petro_station_app.custom_api.statement.fetch_order_numbers.fetch_discount',  // Your Python method\n//         args: {\n//             statement_name: frm.doc.name  // Pass the name of the Statement document\n//         },\n//         callback: function(response) {\n//             const invoice_sales = response.message || [];  // Fetch the invoice sales from the response\n//             console.log(response);  // Log the response for debugging purposes\n\n//             if (invoice_sales.length > 0) {\n//                 let statement_details = frm.doc.statement_details || [];\n\n//                 // Loop through each statement detail and update the fields\n//                 statement_details.forEach((detail, index) => {\n//                     if (invoice_sales[index]) {\n//                         // Update the relevant fields in the Statement Details child table\n//                         // frappe.model.set_value(detail.doctype, detail.name, 'invoice_vourcher', invoice_sales[index].invoice_vourcher);\n//                         frappe.model.set_value(detail.doctype, detail.name, 'additional_discount_amount', invoice_sales[index].additional_discount_amount);\n//                         // frappe.model.set_value(detail.doctype, detail.name, 'outstanding_amount', invoice_sales[index].outstanding_amount);\n//                     }\n//                 });\n\n//                 // Refresh the field to show the updated data in the child table\n//                 frm.refresh_field('statement_details');\n//             }\n//         }\n//     });\n// }\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-09-29 16:17:29.309538",
  "module": "Petro Station App",
  "name": "fetch cards",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    card: function(frm) {\r\n        // Fetch card details based on customer and card number\r\n        if (frm.doc.customer && frm.doc.card) {\r\n            fetchCardDetails(frm);\r\n        } \r\n    }\r\n});\r\n\r\n// Function to fetch card details\r\nfunction fetchCardDetails(frm) {\r\n    if (frm.doc.pick_the_card && !frm.doc.has_fuel_card) { // Check if pick_the_card is set and has_fuel_card is not set\r\n        frm.set_value('has_card', 1); // Set has_fuel_card to 1\r\n        // frm.save_or_update(); // Save the form\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 0,
  "modified": "2024-11-25 15:54:37.874728",
  "module": "Petro Station App",
  "name": "Pumps on Shift",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    employee: function(frm) {\r\n        if (frm.doc.employee) {\r\n            frappe.call({\r\n                method: \"petro_station_app.shift_closing_updates.pumps_shifts.get_station_shift_management_records\",\r\n                args: {\r\n                    employee_name: frm.doc.employee,\r\n                    date: frm.doc.date\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message && response.message.length > 0) {\r\n                        // Extract all pump_or_tank values for the selected employee\r\n                        let pumpOrTanks = [];\r\n                        response.message.forEach(record => {\r\n                            record.items.forEach(item => {\r\n                                if (!pumpOrTanks.includes(item.pump_or_tank)) {\r\n                                    pumpOrTanks.push(item.pump_or_tank);\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        if (pumpOrTanks.length > 0) {\r\n                            // Clear existing rows in the child table\r\n                            frm.clear_table(\"items\");\r\n\r\n                            // Populate the child table with unique pump_or_tank values\r\n                            pumpOrTanks.forEach(pump => {\r\n                                let row = frm.add_child(\"items\");\r\n                                row.pos_profile = pump; // Map the pump_or_tank to the pos_profile field\r\n                            });\r\n\r\n                            // Refresh the field to show changes\r\n                            frm.refresh_field(\"items\");\r\n                        } else {\r\n                            frappe.msgprint({\r\n                                title: __('No Pumps or Tanks Found'),\r\n                                message: __('No pump or tank data found for the selected employee. Please select another employee.'),\r\n                                indicator: 'red'\r\n                            });\r\n                        }\r\n                    } else {\r\n                        frappe.msgprint({\r\n                            title: __('No Data Found'),\r\n                            message: __('No shift records were found for the selected employee and date.'),\r\n                            indicator: 'red'\r\n                        });\r\n\r\n                        // Clear existing rows in the child table\r\n                        frm.clear_table(\"items\");\r\n                        frm.refresh_field(\"items\");\r\n                    }\r\n                },\r\n                error: function(error) {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        message: __('An error occurred while fetching shift records.'),\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            // Clear the child table if the employee field is cleared\r\n            frm.clear_table(\"items\");\r\n            frm.refresh_field(\"items\");\r\n        }\r\n    },\r\n    validate: function(frm) {\r\n        if (!frm.doc.items || frm.doc.items.length === 0) {\r\n            frappe.throw(__('You must add at least one pump or tank to the Fuel Sales Items table.'));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 1,
  "modified": "2024-12-03 09:43:01.663413",
  "module": "Petro Station App",
  "name": "get_rates_for_discounts",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n    get_rates_for_discounts: function(frm) {\r\n        // Call the Python function\r\n        frappe.call({\r\n            method: \"petro_station_app.custom_api.shift_closing.get_rates_for_discounts.get_grouped_sales_invoices_with_outstanding\",\r\n            args: {\r\n                employee: frm.doc.employee,\r\n                posting_date: frm.doc.from_date,\r\n                docname: frm.doc.name,\r\n                cost_center:frm.doc.station\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.Items) {\r\n                    console.log(\"Fetched Items:\", r.message.Items); // Log fetched items for debugging\r\n                    \r\n                    let grand_total = 0;\r\n                    \r\n                    // Iterate over the returned items\r\n                    r.message.Items.forEach(item => {\r\n                        console.log(\"Processing item:\", item[\"Item Code\"]); // Log item being processed\r\n\r\n                        // Find the existing row based on the \"fuel\" item code\r\n                        let existing_row = frm.doc.overal_shift_closing_items.find(row => row.fuel === item[\"Item Code\"]);\r\n\r\n                        // If the row already exists, update the quantity\r\n                        if (existing_row) {\r\n                            let new_qty = existing_row.qty_on_meter - item[\"Quantity\"]; \r\n                            existing_row.qty_on_meter = new_qty;\r\n                            console.log(`Updated qty for ${item[\"Item Code\"]} to ${new_qty}`);\r\n                        }\r\n\r\n                        // Re-add the row (even if it exists) with updated information\r\n                        let new_row = frm.add_child('overal_shift_closing_items');\r\n                        new_row.fuel = item[\"Item Code\"]; // Map \"Item Code\" to fuel\r\n                        new_row.rate = item[\"Rate\"]; // Map \"Rate\" to rate\r\n                        new_row.qty_on_meter = item[\"Quantity\"]; // Set the fetched quantity to qty_on_meter\r\n                        console.log(`Re-added row for ${item[\"Item Code\"]} with qty: ${item[\"Quantity\"]}`);\r\n\r\n                        // Calculate meter-based and sales-based total amounts\r\n                        new_row.meter_based_total_amount = (new_row.qty_on_meter || 0) * (new_row.rate || 0);\r\n                        new_row.sales_based_total_amount = (new_row.qty_on_sales || 0) * (new_row.rate || 0);\r\n                        \r\n                        // Add to grand total\r\n                        grand_total += new_row.meter_based_total_amount;\r\n                        \r\n                        // Calculate the cash sales as the difference between meter-based and sales-based amounts\r\n                        new_row.cash_sales = new_row.meter_based_total_amount - new_row.sales_based_total_amount;\r\n                    });\r\n\r\n                    // Set grand total and refresh the table field\r\n                    frm.set_value('meter_based_grand_total_amount', grand_total);\r\n                    frm.refresh_field('overal_shift_closing_items'); // Refresh the table to show updated values\r\n                    \r\n                    // After adding/updating rows, calculate the totals\r\n                    calculateCustomerTotals(frm); // Call the calculateCustomerTotals function to recalculate\r\n                } else {\r\n                    frappe.msgprint({\r\n                        title: __(\"No Data\"),\r\n                        indicator: \"orange\",\r\n                        message: __(\"No items were found with rate mismatches.\")\r\n                    });\r\n                }\r\n            },\r\n            error: function(err) {\r\n                console.error(\"Error fetching grouped items:\", err); // Log the error\r\n                frappe.msgprint({\r\n                    title: __(\"Error\"),\r\n                    indicator: \"red\",\r\n                    message: __(\"An error occurred while fetching rates.\")\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Function to calculate totals based on items\r\nfunction calculateCustomerTotals(frm) {\r\n    let total_qty = 0;\r\n    let grand_total = 0;\r\n\r\n    if (frm.doc.overal_shift_closing_items && frm.doc.overal_shift_closing_items.length > 0) {\r\n        frm.doc.overal_shift_closing_items.forEach(function(item) {\r\n            // Calculate meter-based and sales-based total amounts\r\n            item.meter_based_total_amount = (item.qty_on_meter || 0) * (item.rate || 0);\r\n            item.sales_based_total_amount = (item.qty_on_sales || 0) * (item.rate || 0);\r\n            \r\n            // Update the grand total with the meter-based total\r\n            grand_total += item.meter_based_total_amount;\r\n\r\n            // Calculate the cash sales as the difference between meter-based and sales-based amounts\r\n            item.cash_sales = item.meter_based_total_amount - item.sales_based_total_amount;\r\n        });\r\n        \r\n        // Set the grand total value to the form field\r\n        frm.set_value('meter_based_grand_total_amount', grand_total);\r\n\r\n        // Refresh the field to display updated values\r\n        frm.refresh_field('overal_shift_closing_items');\r\n    } else {\r\n        console.log(\"No items found in overal_shift_closing_items.\");\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2025-01-02 12:55:57.328978",
  "module": "Petro Station App",
  "name": "Credit vouvher no",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    onload: function(frm) {\r\n        // Clear the station_invoice_number field only if the document is new or being duplicated\r\n        if (frm.is_new() || frm.doc.__islocal) {\r\n            frm.set_value('station_invoice_number', '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 0,
  "modified": "2025-01-03 19:28:44.515802",
  "module": "Petro Station App",
  "name": "Fetch Sales Report",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n        // Trigger on save event\r\n    refresh: function(frm) {\r\n        // Check if the logged-in user has the 'Management Role'\r\n        if (frappe.user.has_role('Management Role')) {\r\n            // Hide the fields\r\n            frm.set_df_property('station', 'hidden', 1);\r\n            frm.set_df_property('employee', 'hidden', 1);\r\n            frm.set_df_property('shift', 'hidden', 1);\r\n        }\r\n    },\r\n    // Trigger on save event\r\n    before_save: function(frm) {\r\n        // Check if the logged-in user does not have the 'Management Role'\r\n        if (frappe.user.has_role('Management Role')) {\r\n            // Get the date and station values from the form fields\r\n            const date = frm.doc.from_date;\r\n            const station = frm.doc.station;\r\n\r\n            // Call the Python function using frappe.call\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.statement.sales_report.fetch_and_aggregate_station_shift_data',  // Python method path\r\n                args: {\r\n                    date: date,\r\n                    station: station\r\n                },\r\n                callback: function(response) {\r\n                    // Handle the response from the Python function\r\n                    if (response.message && response.message.totals_by_pump_or_tank) {\r\n                        const totals = response.message.totals_by_pump_or_tank;\r\n\r\n                        // Clear existing child table data\r\n                        frm.clear_table('items');\r\n\r\n                        // Populate the child table with data\r\n                        for (const pump_or_tank in totals) {\r\n                            const readings = totals[pump_or_tank];\r\n                            const row = frm.add_child('items');\r\n                            row.pump_or_tank = pump_or_tank;\r\n                            row.opening_meter_reading = readings.opening_meter_reading;\r\n                            row.closing_meter_reading = readings.closing_meter_reading;\r\n                            row.qty_sold_on_meter_reading = readings.qty_sold_on_meter_reading;\r\n                            row.qty_based_on_sales = readings.qty_based_on_sales;\r\n                            row.sales_based_on_meter_reading = readings.sales_based_on_meter_reading;\r\n                            row.sales_based_on_invoices = readings.sales_based_on_invoices;\r\n                            row.difference_amount = readings.difference_amount;\r\n                            \r\n                        }\r\n\r\n                        // Refresh the table to display the new rows\r\n                        frm.refresh_field('items');\r\n\r\n                        frappe.msgprint(__('Data successfully processed and child table updated.'));\r\n                    } else {\r\n                        frappe.msgprint(__('No data found to process.'));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transactions Report",
  "enabled": 1,
  "modified": "2025-01-15 21:11:45.262054",
  "module": "Petro Station App",
  "name": "Route to details report",
  "script": "frappe.ui.form.on('Transactions Report Accounts', {\r\n    view_details: function (frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        // Validate if the account is selected in the current row\r\n        if (!row || !row.account) {\r\n            frappe.msgprint({\r\n                title: __('Validation Error'),\r\n                indicator: 'red',\r\n                message: __('Please select an account in this row.')\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Utility function to set field values and trigger input events\r\n        const setFieldValue = (fieldname, value, label) => {\r\n            const inputElement = document.querySelector(`input[data-fieldname=\"${fieldname}\"]`);\r\n            if (inputElement) {\r\n                inputElement.value = value || '';\r\n                inputElement.dispatchEvent(new Event('input', { bubbles: true }));\r\n                console.log(`${label || fieldname} set to:`, value);\r\n            } else {\r\n                console.log(`${label || fieldname} field not found.`);\r\n            }\r\n        };\r\n\r\n        // Set the fields on the custom page\r\n        setFieldValue('account_name', row.account, 'Account Name');\r\n        setFieldValue('from_date', frm.doc.from_date, 'From Date');\r\n        setFieldValue('to_date', frm.doc.to_date, 'To Date');\r\n        setFieldValue('cost_center', frm.doc.station, 'Cost Center');\r\n\r\n        // Redirect to the \"Detailed Report\" page with query parameters\r\n        frappe.set_route('Detailed Report', {\r\n            account_name: row.account,\r\n            from_date: frm.doc.from_date,\r\n            to_date: frm.doc.to_date,\r\n            cost_center: frm.doc.station\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Station Shift Management",
  "enabled": 0,
  "modified": "2025-01-13 14:32:31.674427",
  "module": "Petro Station App",
  "name": "Items total Discount",
  "script": "frappe.ui.form.on('Station Shift Management', {\r\n    refresh: function (frm) {\r\n        frm.add_custom_button(__('Fetch Invoices'), function () {\r\n            // Validate required fields\r\n            if (!frm.doc.station || !frm.doc.from_date) {\r\n                frappe.msgprint(__('Please set both \"Station\" and \"From Date\" fields before fetching invoices.'));\r\n                return;\r\n            }\r\n\r\n            // Prepare filters\r\n            const filters = {\r\n                account_name: \"1115 - MTN Mobile - SE\",\r\n                // date: frm.doc.from_date,\r\n            };\r\n\r\n            // Call server-side method\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.transaction_report.view_details.fetch_transactions',\r\n                args: filters,\r\n                callback: function (response) {\r\n                    if (response.message) {\r\n                        // Log the response to console\r\n                        console.log('Fetched Invoices:', response.message);\r\n                        \r\n                        // Optionally, process and add the fetched data to a field or child table\r\n                        if (Array.isArray(response.message)) {\r\n                            frm.clear_table('invoices'); // Assuming you have a child table named 'invoices'\r\n                            response.message.forEach(invoice => {\r\n                                let row = frm.add_child('invoices');\r\n                                frappe.model.set_value(row.doctype, row.name, 'invoice_number', invoice.invoice_number);\r\n                                frappe.model.set_value(row.doctype, row.name, 'amount', invoice.amount);\r\n                            });\r\n                            frm.refresh_field('invoices');\r\n                        } else {\r\n                            frappe.msgprint(__('No invoices found.'));\r\n                        }\r\n                    } else {\r\n                        frappe.msgprint(__('No data returned from the server.'));\r\n                    }\r\n                },\r\n                error: function (error) {\r\n                    frappe.msgprint(__('An error occurred while fetching invoices. Please check your connection or contact support.'));\r\n                    console.error('Fetch Invoices Error:', error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Detailed Report",
  "enabled": 1,
  "modified": "2025-01-15 21:02:12.119219",
  "module": "Petro Station App",
  "name": "Detailed Report",
  "script": "frappe.ui.form.on('Detailed Report', {\r\n    refresh: function (frm) {\r\n        // Add a custom button to fetch transactions\r\n        frm.add_custom_button(__('Fetch Transactions'), function () {\r\n            fetchDetails(frm);\r\n        });\r\n\r\n        // Prefill account_name if available in the route parameters\r\n        const route = frappe.get_route();\r\n        const accountNameParam = route && route[1]?.account_name;\r\n\r\n        if (accountNameParam) {\r\n            frm.set_value('account_name', accountNameParam);\r\n        }\r\n    }\r\n});\r\nfunction fetchDetails(frm) {\r\n    const { account_name, from_date, to_date, cost_center } = frm.doc;\r\n\r\n    if (!account_name) {\r\n        frappe.msgprint(__('Please enter an account name'));\r\n        return;\r\n    }\r\n\r\n    frappe.call({\r\n        method: \"petro_station_app.custom_api.transaction_report.view_details.fetch_transactions\",\r\n        args: {\r\n            account_name,\r\n            from_date,\r\n            to_date,\r\n            station: cost_center\r\n        },\r\n        callback: function (response) {\r\n            const transactions = response.message || [];\r\n            let totalDebit = 0;\r\n            let totalCredit = 0;\r\n\r\n            // Calculate totals\r\n            transactions.forEach(trx => {\r\n                totalDebit += trx.debit || 0;\r\n                totalCredit += trx.credit || 0;\r\n            });\r\n\r\n            // Create the total row HTML\r\n            const totalRow = `\r\n                <tr>\r\n                    <th colspan=\"2\"><strong>Total</strong></th>\r\n                    <th><strong>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(totalDebit)}</strong></th>\r\n                    <th><strong>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(totalCredit)}</strong></th>\r\n                    <th><strong>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(totalDebit - totalCredit)}</strong></th>\r\n                    <th colspan=\"4\"></th>\r\n                </tr>\r\n            `;\r\n\r\n            // Create the table header\r\n            const tableHeader = `\r\n                <table class=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Posting Date</th>\r\n                            <th>Account</th>\r\n                            <th>Debit</th>\r\n                            <th>Credit</th>\r\n                            <th>Difference (Debit - Credit)</th>\r\n                            <th>Voucher Type</th>\r\n                            <th>Voucher No</th>\r\n                            <th>Voucher Subtype</th>\r\n                            <th>Employer/Party</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n            `;\r\n\r\n            // Generate the transaction rows\r\n            const transactionRows = transactions.map(trx => {\r\n                const debit = trx.debit || 0;\r\n                const credit = trx.credit || 0;\r\n                const difference = debit - credit;\r\n\r\n                const voucherLink = `/app/${trx.voucher_type.toLowerCase().replace(' ', '-')}/${trx.voucher_no}`;\r\n                const partyOrEmployer = trx.employee_name || 'N/A';\r\n\r\n                return `\r\n                    <tr>\r\n                        <td>${trx.posting_date || ''}</td>\r\n                        <td>${trx.account || ''}</td>\r\n                        <td>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(debit)}</td>\r\n                        <td>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(credit)}</td>\r\n                        <td>${new Intl.NumberFormat('en-UG', { style: 'currency', currency: 'UGX', minimumFractionDigits: 0 }).format(difference)}</td>\r\n                        <td>${trx.voucher_type || ''}</td>\r\n                        <td><a href=\"${voucherLink}\" target=\"_blank\">${trx.voucher_no || ''}</a></td>\r\n                        <td>${trx.voucher_subtype || ''}</td>\r\n                        <td>${partyOrEmployer}</td>\r\n                    </tr>\r\n                `;\r\n            }).join('');\r\n\r\n            // Combine the total row, header, and transaction rows\r\n            const html = `\r\n                ${tableHeader}\r\n                ${totalRow}\r\n                ${transactionRows}\r\n                </tbody>\r\n                </table>\r\n            `;\r\n\r\n            // Display the results in the HTML field\r\n            frm.set_df_property('html_field', 'options', html);\r\n        },\r\n        error: function (err) {\r\n            frappe.msgprint(__('An error occurred while fetching transactions. Please try again.'));\r\n            console.error('Error fetching transactions:', err);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2025-01-23 01:21:51.441925",
  "module": "Petro Station App",
  "name": "Fetch actual qty",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    validate: function (frm) {\r\n        let negative_stock_rows = [];\r\n\r\n        // Collect rows with negative tank_stock_qty\r\n        frm.doc.items.forEach((row) => {\r\n            if (row.tank_stock_qty < 0) {\r\n                negative_stock_rows.push({\r\n                    fuel_tank: row.fuel_tank,\r\n                    qty: row.tank_stock_qty,\r\n                });\r\n            }\r\n        });\r\n\r\n        // If any negative stock rows are found, show a persistent dialog\r\n        if (negative_stock_rows.length > 0) {\r\n            let message = '<ul>';\r\n            negative_stock_rows.forEach((item) => {\r\n                message += `<li>Fuel Tank: <b>${item.fuel_tank}</b>, Negative Quantity: <b>${item.qty}</b></li>`;\r\n            });\r\n            message += '</ul>';\r\n\r\n            // Show a custom dialog\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: __('Negative Stock Alert'),\r\n                fields: [\r\n                    {\r\n                        label: __('Details'),\r\n                        fieldtype: 'HTML',\r\n                        options: `\r\n                            <h2 style=\"color: red;\">The following Tanks have negative Stock Quantities:</h2>\r\n                            <b>${message}<b/>\r\n                            <p style=\"font-size: 16px; color: black;\">\r\n                                <h2>Please ensure all your purchases are recorded in the system to avoid discrepancies.</h2>\r\n                            </p>\r\n                        `,\r\n                    },\r\n                ],\r\n                primary_action_label: __('Dismiss'),\r\n                primary_action: function () {\r\n                    dialog.hide();\r\n                },\r\n            });\r\n\r\n            dialog.show();\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n// Function to fetch and set tank_stock_qty\r\nfunction fetch_and_set_tank_stock_qty(frm, cdt, cdn) {\r\n    let row = frappe.get_doc(cdt, cdn);\r\n\r\n    if (row.warehouse) {\r\n        // Fetch the Warehouse details\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Warehouse\",\r\n                name: row.warehouse,\r\n            },\r\n            callback: function (response) {\r\n                if (response.message) {\r\n                    let warehouse = response.message;\r\n\r\n                    // Get the default_in_transit_warehouse\r\n                    let default_in_transit_warehouse = warehouse.default_in_transit_warehouse;\r\n                    console.log(`Default In-Transit Warehouse: ${default_in_transit_warehouse}`);\r\n\r\n                    if (default_in_transit_warehouse) {\r\n                        // Fetch the actual_qty from Bin for the default_in_transit_warehouse\r\n                        frappe.call({\r\n                            method: \"frappe.client.get_list\",\r\n                            args: {\r\n                                doctype: \"Bin\",\r\n                                filters: {\r\n                                    warehouse: default_in_transit_warehouse,\r\n                                },\r\n                                fields: [\"actual_qty\"],\r\n                                limit_page_length: 1,\r\n                            },\r\n                            callback: function (binResponse) {\r\n                                if (binResponse.message && binResponse.message.length > 0) {\r\n                                    let actual_qty = binResponse.message[0].actual_qty || 0;\r\n\r\n                                    // Set the tank_stock_qty field \r\n                                    frappe.model.set_value(cdt, cdn, 'tank_stock_qty', actual_qty);\r\n                                     frappe.model.set_value(cdt, cdn, 'fuel_tank', default_in_transit_warehouse);\r\n\r\n                                    // Optional: Log for debugging\r\n                                    console.log(`Actual Qty for ${default_in_transit_warehouse}: ${actual_qty}`);\r\n                                } else {\r\n                                    frappe.msgprint(__('No stock found for the Default In-Transit Warehouse.'));\r\n                                }\r\n                            },\r\n                            error: function (err) {\r\n                                frappe.msgprint(__('Failed to fetch stock from Bin.'));\r\n                                console.error(err);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint(__('Default In-Transit Warehouse not set for the selected Warehouse.'));\r\n                    }\r\n                }\r\n            },\r\n            error: function (err) {\r\n                frappe.msgprint(__('Failed to fetch Warehouse details.'));\r\n                console.error(err);\r\n            }\r\n        });\r\n    } else {\r\n        frappe.msgprint(__('Please select a Warehouse before entering Quantity or Amount.'));\r\n    }\r\n}\r\n\r\n// Trigger the function on selection of qty and amount\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        fetch_and_set_tank_stock_qty(frm, cdt, cdn);\r\n    },\r\n    amount: function (frm, cdt, cdn) {\r\n        fetch_and_set_tank_stock_qty(frm, cdt, cdn);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2025-01-23 01:27:38.410355",
  "module": "Petro Station App",
  "name": "Validating Negative QTY",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n    validate: function (frm) {\r\n        let negative_stock_rows = [];\r\n\r\n        // Collect rows with negative tank_stock_qty\r\n        frm.doc.items.forEach((row) => {\r\n            if (row.tank_stock_qty < 0) {\r\n                negative_stock_rows.push({\r\n                    fuel_tank: row.fuel_tank,\r\n                    qty: row.tank_stock_qty,\r\n                });\r\n            }\r\n        });\r\n\r\n        // If any negative stock rows are found, show a persistent dialog\r\n        if (negative_stock_rows.length > 0) {\r\n            let message = '<ul>';\r\n            negative_stock_rows.forEach((item) => {\r\n                message += `<li>Fuel Tank: <b>${item.fuel_tank}</b>, Negative Quantity: <b>${item.qty}</b></li>`;\r\n            });\r\n            message += '</ul>';\r\n\r\n            // Show a custom dialog\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: __('Negative Stock Alert'),\r\n                fields: [\r\n                    {\r\n                        label: __('Details'),\r\n                        fieldtype: 'HTML',\r\n                        options: `\r\n                            <h2 style=\"color: red;\">The following Tanks have negative Stock Quantities:</h2>\r\n                            <b>${message}<b/>\r\n                            <p style=\"font-size: 16px; color: black;\">\r\n                                <h2>Please ensure all your purchases are recorded in the system to avoid discrepancies.</h2>\r\n                            </p>\r\n                        `,\r\n                    },\r\n                ],\r\n                primary_action_label: __('Dismiss'),\r\n                primary_action: function () {\r\n                    dialog.hide();\r\n                },\r\n            });\r\n\r\n            dialog.show();\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n// Function to fetch and set tank_stock_qty\r\nfunction fetch_and_set_tank_stock_qty(frm, cdt, cdn) {\r\n    let row = frappe.get_doc(cdt, cdn);\r\n\r\n    if (row.warehouse) {\r\n        // Fetch the Warehouse details\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Warehouse\",\r\n                name: row.warehouse,\r\n            },\r\n            callback: function (response) {\r\n                if (response.message) {\r\n                    let warehouse = response.message;\r\n\r\n                    // Get the default_in_transit_warehouse\r\n                    let default_in_transit_warehouse = warehouse.default_in_transit_warehouse;\r\n                    console.log(`Default In-Transit Warehouse: ${default_in_transit_warehouse}`);\r\n\r\n                    if (default_in_transit_warehouse) {\r\n                        // Fetch the actual_qty from Bin for the default_in_transit_warehouse\r\n                        frappe.call({\r\n                            method: \"frappe.client.get_list\",\r\n                            args: {\r\n                                doctype: \"Bin\",\r\n                                filters: {\r\n                                    warehouse: default_in_transit_warehouse,\r\n                                },\r\n                                fields: [\"actual_qty\"],\r\n                                limit_page_length: 1,\r\n                            },\r\n                            callback: function (binResponse) {\r\n                                if (binResponse.message && binResponse.message.length > 0) {\r\n                                    let actual_qty = binResponse.message[0].actual_qty || 0;\r\n\r\n                                    // Set the tank_stock_qty field \r\n                                    frappe.model.set_value(cdt, cdn, 'tank_stock_qty', actual_qty);\r\n                                     frappe.model.set_value(cdt, cdn, 'fuel_tank', default_in_transit_warehouse);\r\n\r\n                                    // Optional: Log for debugging\r\n                                    console.log(`Actual Qty for ${default_in_transit_warehouse}: ${actual_qty}`);\r\n                                } else {\r\n                                    frappe.msgprint(__('No stock found for the Default In-Transit Warehouse.'));\r\n                                }\r\n                            },\r\n                            error: function (err) {\r\n                                frappe.msgprint(__('Failed to fetch stock from Bin.'));\r\n                                console.error(err);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint(__('Default In-Transit Warehouse not set for the selected Warehouse.'));\r\n                    }\r\n                }\r\n            },\r\n            error: function (err) {\r\n                frappe.msgprint(__('Failed to fetch Warehouse details.'));\r\n                console.error(err);\r\n            }\r\n        });\r\n    } else {\r\n        frappe.msgprint(__('Please select a Warehouse before entering Quantity or Amount.'));\r\n    }\r\n}\r\n\r\n// Trigger the function on selection of qty and amount\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        fetch_and_set_tank_stock_qty(frm, cdt, cdn);\r\n    },\r\n    amount: function (frm, cdt, cdn) {\r\n        fetch_and_set_tank_stock_qty(frm, cdt, cdn);\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]